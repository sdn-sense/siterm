#!/usr/bin/env python3
"""
This part of code is taken from:
   https://web.archive.org/web/20160305151936/http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/
Please respect developer (Sander Marechal) and always keep a reference to URL and also as kudos to him
Changes applied to this code:
    Dedention (Justas Balcas 07/12/2017)
    pylint fixes: with open, split imports, var names, old style class (Justas Balcas 07/12/2017)
"""
import os
import sys
from DTNRMLibs.Daemonizer import Daemon, getParser, validateArgs
from DTNRMLibs.MainUtilities import getFileContentAsJson
try:
    from DTNRMAgent.Debugger.BackgroundRuns import PromPush
except ModuleNotFoundError:
    from SiteFE.SNMPMonitoring.snmpPushGateway import PromPush

COMPONENT = 'Prometheus-Push'
DESCRIPTION = "Push Prometheus status. This daemon is run automatically by Debugger/SNMPMonitoring"
DAEMON = None

class MyDaemon(Daemon):
    """ My own Deamon override """

    def getThreads(self):
        """Multi threading. Allow multiple sites under single FE"""
        outThreads = {}
        workDir = self.config.get('general', 'private_dir') + "/DTNRM/background/"
        # get run ID;
        fname = workDir + f"/background-process-{self.inargs.runnum}.json"
        if not os.path.isfile(fname):
            self.logger.warning(f'Filename {fname} not available for background process. Exiting')
            sys.exit(1)
        backgConfig = getFileContentAsJson(fname)

        self.totalRuntime = int(backgConfig['requestdict']['runtime'])
        self.sleepTimers['ok'] = int(backgConfig['requestdict']['resolution'])
        for sitename in self.config.get('general', 'sitename'):
            promAgent = PromPush.PromPush(self.config, sitename, backgConfig)
            outThreads[sitename] = promAgent
        return outThreads

if __name__ == "__main__":
    parser = getParser(DESCRIPTION)
    if len(sys.argv) == 1:
        parser.print_help()
    inargs = parser.parse_args(sys.argv[1:])
    validateArgs(inargs)
    DAEMON = MyDaemon(COMPONENT, inargs)
    DAEMON.command()
