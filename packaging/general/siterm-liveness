#!/usr/bin/env python3
"""
Kubernetes liveness checker for the service;
"""
import argparse
import os
import subprocess
import sys
from datetime import datetime

from SiteRMLibs.hostcert import HostCertHandler
from SiteRMLibs.MainUtilities import timedhourcheck


def certCheker():
    """Check if certificates are valid and ready to use."""
    if timedhourcheck("siterm-liveness", 1):
        return 0
    certHandler = HostCertHandler()
    return certHandler.externalCertChecker()


def checkServices(onlyservices=None):
    """Check if all services are running in supervisorctl"""
    onlyservices = onlyservices or []
    try:
        # Run supervisorctl status command
        result = subprocess.run(["supervisorctl", "status"], capture_output=True, text=True, check=False)
        output = result.stdout

        # Parse output to check if all services are running
        services = output.strip().split("\n")
        for service in services:
            serviceline = service.split()
            if serviceline[1] != "RUNNING":
                if serviceline[0] in onlyservices or not onlyservices:
                    print(f"Service not running state. Details: {service}")
                    return False
    except subprocess.CalledProcessError as e:
        print("Error running supervisorctl:", e)
        print("Will ignore error and return all is good.")
    return True


def enableLivenessCheck(statFile):
    """Enable the liveness check by removing the disable file if it exists."""
    if os.path.exists(statFile):
        try:
            os.remove(statFile)
            print("Liveness check enabled. Removed disable file.")
        except OSError as e:
            print(f"Error removing disable file: {e}")
            sys.exit(1)
    else:
        print("Liveness check is already enabled.")


def disableLivenessCheck(statFile):
    """Disable the liveness check by creating the disable file if it doesn't exist."""
    if not os.path.exists(statFile):
        try:
            with open(statFile, "w", encoding="utf-8") as fd:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                fd.write(f"Liveness check disabled at {timestamp} \n")
            print("Liveness check disabled. Created disable file.")
        except OSError as e:
            print(f"Error creating disable file: {e}")
            sys.exit(1)
    else:
        print("Liveness check is already disabled.")
        with open(statFile, "r", encoding="utf-8") as fd:
            print(fd.read())


def runChecks():
    """Run all checks"""
    try:
        state = 0 if checkServices() else 1
        state = state or certCheker()
    except Exception as e:
        print(f"[FAILED] Exception during checks: {e}")
        state = 100
    # Write this to output file
    with open("/tmp/siterm-liveness", "w", encoding="utf-8") as fd:
        fd.write(f"{state}\n")
    return state


def checkConfigReady():
    """Check if config fetcher is done."""
    if os.path.exists("/tmp/config-fetcher-ready"):
        return -1
    print("Config fetcher is still running. Check stdout/stderr.")
    if os.path.exists("/dev/shm/config-fetcher-counter"):
        with open("/dev/shm/config-fetcher-counter", "r", encoding="utf-8") as fd:
            counter = fd.read().strip()
            if int(counter) >= 10:
                print("Config fetcher failed counter:", counter)
                return counter
    return 0


if __name__ == "__main__":
    livenessFile = "/tmp/siterm-liveness-disabled"
    parser = argparse.ArgumentParser(description="Kubernetes liveness checker with enable/disable options.")
    parser.add_argument("--enable", action="store_true", help="Enable the liveness check.")
    parser.add_argument("--disable", action="store_true", help="Disable the liveness check.")
    parser.add_argument(
        "--ignorelock",
        action="store_true",
        help="Ignore Liveness lock file and run all checks. (Useful for debugging failing service)",
    )
    args = parser.parse_args()

    configFetcher = checkConfigReady()
    if configFetcher != -1:
        sys.exit(configFetcher)

    if args.enable:
        enableLivenessCheck(livenessFile)
        sys.exit(0)

    if args.disable:
        disableLivenessCheck(livenessFile)
        sys.exit(0)

    if os.path.exists("/tmp/siterm-mariadb-init"):
        print("Mariadb init is still running. Exiting. Check /var/log/supervisor/mariadb_* log files")
        sys.exit(0 if checkServices(["mariadb", "mariadb_init"]) else 1)

    if os.path.exists(livenessFile) and not args.ignorelock:
        print("Liveness check is disabled. Use --enable to enable or --ignorelock to run all checks and bypass this.")
        sys.exit(0)

    sys.exit(runChecks())
