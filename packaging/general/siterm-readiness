#!/usr/bin/env python3
"""
Kubernetes readiness checker for the pod.
"""
import argparse
import os
import sys
from datetime import datetime

from SiteRMLibs.GitConfig import getGitConfig
from SiteRMLibs.hostcert import HostCertHandler
from SiteRMLibs.HTTPLibrary import Requests
from SiteRMLibs.MainUtilities import getFileContentAsJson, getFullUrl, timedhourcheck


def certCheker():
    """Check if certificates are valid and ready to use."""
    if timedhourcheck("siterm-readiness", 1):
        return 0
    certHandler = HostCertHandler()
    return certHandler.externalCertChecker()


def getStates():
    """Get the states of all services and return the exit code"""
    directory = "/tmp/siterm-states/"
    files = []
    exitCode = 0
    for _, _, filenames in os.walk(directory):
        files.extend(filenames)
        break
    for fname in files:
        if fname.endswith(".json"):
            out = getFileContentAsJson(directory + fname)
            if out.get("state", "UNKNOWN") == "WARNING":
                # Get content and report back, but exitCode does not change that - as this is just a warning
                msg = f"[WARNING] {out.get('component', 'UNKNOWN')}. Exception: {out.get('exc', 'UNKNOWN')}"
                print(msg)
            elif out.get("state", "UNKNOWN") != "OK":
                exitCode = 1
                msg = f"[FAILED] {out.get('component', 'UNKNOWN')}. Exception: {out.get('exc', 'UNKNOWN')}."
                msg += f" State: {out.get('state', 'UNKNOWN')}."
                print(msg)
    return exitCode


def enableReadinessCheck(statFile):
    """Enable the Readiness check by removing the disable file if it exists."""
    if os.path.exists(statFile):
        try:
            os.remove(statFile)
            print("Readiness check enabled. Removed disable file.")
        except OSError as e:
            print(f"Error removing disable file: {e}")
            sys.exit(1)
    else:
        print("Readiness check is already enabled.")


def disableReadinessCheck(statFile):
    """Disable the Readiness check by creating the disable file if it doesn't exist."""
    if not os.path.exists(statFile):
        try:
            with open(statFile, "w", encoding="utf-8") as fd:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                fd.write(f"Readiness check disabled at {timestamp} \n")
            print("Readiness check disabled. Created disable file.")
        except OSError as e:
            print(f"Error creating disable file: {e}")
            sys.exit(1)
    else:
        print("Readiness check is already disabled.")
        with open(statFile, "r", encoding="utf-8") as fd:
            print(fd.read())


def checkHTTPService():
    """Check if the HTTP service is ready."""
    if not os.path.exists("/tmp/config-fetcher-ready"):
        return 0
    try:
        config = getGitConfig()
        fullUrl = getFullUrl(config)
        requestHandler = Requests(url=fullUrl, logger=None)
        requestHandler.apiAlive()
        requestHandler.apiReady()
        return 0
    except Exception as ex:
        print(f"Error checking HTTP service readiness: {ex}")
    return 1


def runChecks():
    """Run all checks for readiness."""
    state = 0
    try:
        state = getStates()
        state = state or certCheker()
    except Exception as e:
        print(f"[FAILED] Exception during checks: {e}")
        state = 100
    # Write this to output file
    with open("/tmp/siterm-readiness", "w", encoding="utf-8") as fd:
        fd.write(f"{state}\n")
    return state


def checkConfigReady():
    """Check if config fetcher is done."""
    if os.path.exists("/tmp/config-fetcher-ready"):
        return -1
    print("Config fetcher is still running. Check stdout/stderr.")
    if os.path.exists("/dev/shm/config-fetcher-counter"):
        with open("/dev/shm/config-fetcher-counter", "r", encoding="utf-8") as fd:
            counter = fd.read().strip()
            if int(counter) >= 10:
                print("Config fetcher failed counter:", counter)
                return counter
    return 0


if __name__ == "__main__":
    readinessFile = "/tmp/siterm-readiness-disabled"
    parser = argparse.ArgumentParser(description="Kubernetes readiness checker with enable/disable options.")
    parser.add_argument("--enable", action="store_true", help="Enable the liveness check.")
    parser.add_argument("--disable", action="store_true", help="Disable the liveness check.")
    parser.add_argument(
        "--ignorelock",
        action="store_true",
        help="Ignore Liveness lock file and run all checks. (Useful for debugging failing service)",
    )
    args = parser.parse_args()

    configFetcher = checkConfigReady()
    if configFetcher != -1:
        sys.exit(configFetcher)

    if args.enable:
        enableReadinessCheck(readinessFile)
        sys.exit(0)

    if args.disable:
        disableReadinessCheck(readinessFile)
        sys.exit(0)

    if os.path.exists("/tmp/siterm-mariadb-init"):
        print("Mariadb init is still running. Exiting. Check /var/log/supervisor/mariadb_* log files")
        sys.exit(0)

    if os.path.exists(readinessFile) and not args.ignorelock:
        print("Readiness check is disabled. Use --enable to enable or --ignorelock to run all checks and bypass this.")
        sys.exit(0)

    sys.exit(runChecks())
