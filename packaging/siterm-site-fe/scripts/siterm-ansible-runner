#!/usr/bin/env python3
# pylint: disable=protected-access
"""
SENSE Ansible test runner
"""
import os
import sys
import pprint
import argparse
import yaml
from yaml import safe_dump as ydump
import ansible_runner
from SiteRMLibs.MainUtilities import getLoggingObject
from SiteRMLibs.MainUtilities import getActiveDeltas
from SiteRMLibs.MainUtilities import getVal
from SiteRMLibs.MainUtilities import getDBConn
from SiteRMLibs.GitConfig import getGitConfig
from SiteRMLibs.Backends.main import Switch

def getParser(description):
    """Returns the argparse parser."""
    oparser = argparse.ArgumentParser(description=description,
                                      prog=os.path.basename(sys.argv[0]), add_help=True)
    oparser.add_argument('--printports', action='store_true',
                         help="Run ansible and print ports for rm-configs.")
    oparser.set_defaults(printports=False)
    oparser.add_argument('--dumpconfig', action='store_true',
                         help="Run ansible and dump configuration received from ansible.")
    oparser.set_defaults(dumpconfig=False)
    oparser.add_argument('--cleanswitch', choices=['exceptactive', 'onlyactive', 'all'],
                         help="Run ansible to clean switch with specified option: "
                              "'exceptactive', 'onlyactive', or 'all'."
                              "It will not execute on the device, just print the commands. Default is None."
                              "IMPORTANT:While exceptactive is safe to run,"
                              "          onlyactive and all are dangerous and execute only if you know what you are doing."
                              "exceptactive - clean all vlans except active ones/provisioned by SENSE."
                              "onlyactive - clean all vlans provisioned by SENSE."
                              "all - clean all vlans.")
    oparser.set_defaults(cleanswitch=None)
    oparser.add_argument('--autoapply', action='store_true',
                         help="auto apply the configuration to the switch. Only for 'cleanswitch' option.")
    oparser.set_defaults(autoapply=False)
    oparser.add_argument('--fulldebug', action='store_true',
                         help="Run ansible with full debug output.")
    return oparser


class SwitchCleaner():
    """Class to clean switch data of sense vlans"""
    def __init__(self, args):
        self.config = getGitConfig()
        self.logger = getLoggingObject(logType="StreamLogger", service="AnsibleCleaner")
        self.switch = Switch(self.config, self.config.config["SITENAME"])
        self.dbI = getVal(getDBConn('List', self), **{'sitename': self.config.config["SITENAME"]})
        self.args = args


    def _getAnsibleCleanCommands(self, swname, inputInterface):
        """Run ansible cleancmd template to get clean commands"""
        inventory = self.switch.plugin._getInventoryInfo([swname])
        self.switch.plugin._writeInventoryInfo(inventory, "_debug")
        # Get host configuration;
        curActiveConf = self.switch.plugin.getHostConfig(swname)
        # Clean all configuration params and add new interfaces
        curActiveConf.pop("interface", {})
        curActiveConf.pop("sense_bgp", {})
        curActiveConf.pop("qos", {})
        curActiveConf["interface"] = inputInterface
        # Write new configuration to file
        self.switch.plugin._writeHostConfig(swname, curActiveConf, "_debug")
        # Run ansible to get clean commands
        self.switch.plugin._applyNewConfig([swname], "_debug", templateName="cleancmd.yaml")
        # Read clean commands
        fname = f"/var/tmp/debug-{swname}.conf"
        if not os.path.isfile(fname):
            self.logger.info(f"There is no clean commands file for {swname}.")
            self.logger.info("-"*100)
            return
        self.logger.info(f"CLEAN COMMANDS FOR {swname}")
        self.logger.info("-"*100)
        with open(fname, 'r', encoding='utf-8') as fd:
            print(fd.read())
        self.logger.info("-"*100)
        os.remove(fname)
        # If autoapply is set, apply the clean commands
        if self.args.autoapply:
            self.logger.info("-"*100)
            self.logger.info(f"Apply clean commands for {swname}")
            # Loop via each interface and apply it
            for intf, intfdict in inputInterface.items():
                self.logger.info(f"Applying clean command for {intf}")
                # Get host configuration;
                curActiveConf = self.switch.plugin.getHostConfig(swname)
                # Clean all configuration params and add new interfaces
                curActiveConf.pop("interface", {})
                curActiveConf.pop("sense_bgp", {})
                curActiveConf.pop("qos", {})
                curActiveConf["interface"] = {intf: intfdict}
                # Write new configuration to file
                self.switch.plugin._writeHostConfig(swname, curActiveConf, "_debug")
                self.switch.plugin._applyNewConfig([swname], "_debug", templateName="applyconfig.yaml")

    def _addVlan(self, hostclean, intf, vlanid, intfdict):
        """Add vlan to hostclean"""
        tmpEntry = {'description': intfdict.get('description', ''),
                                    'mtu': int(intfdict.get('mtu', 1500)),
                                    'name': intf,
                                    'state': 'absent',
                                    'vlanid': vlanid,
                                    'tagged_members': {k: 'absent' for k in intfdict.get('tagged', []) if k}}
        ipsadded = []
        for key in ['ipv4', 'ipv6']:
            for ipdict in intfdict.get(key, []):
                fullIP = f"{ipdict['address']}/{ipdict['masklen']}"
                if fullIP not in ipsadded:
                    tmpEntry.setdefault(f'{key}_address', {})[fullIP] = 'absent'
                    ipsadded.append(fullIP)
        hostclean.setdefault(intf, tmpEntry)


    def clean(self, host, dataIn):
        """Clean switch data of sense vlans. It will not execute on the device, just print the commands"""
        allvlans = self.config.config.get('MAIN', {}).get(host, {}).get('all_vlan_range_list', [])
        activeDeltas = getActiveDeltas(self)
        if not allvlans:
            self.logger.error(f"NO VLANs configured found for {host}. Ignore host")
            return
        hostclean = {}
        usedvlansbydeltas = activeDeltas.get('usedVLANs', {}).get('deltas', {}).get(host, [])
        for intf, intfdict in dataIn.get('ansible_net_interfaces', {}).items():
            if intf.startswith('Vlan'):
                vlanid = int(intf.replace('Vlan', '').strip())
                if vlanid in allvlans:
                    if vlanid in usedvlansbydeltas and self.args.cleanswitch == 'onlyactive':
                        print(f"CLEANING VLAN: {host} - {vlanid}")
                        self._addVlan(hostclean, intf, vlanid, intfdict)
                    elif vlanid not in usedvlansbydeltas and self.args.cleanswitch == 'exceptactive':
                        print(f"CLEANING VLAN: {host} - {vlanid}")
                        self._addVlan(hostclean, intf, vlanid, intfdict)
                    elif self.args.cleanswitch == 'all':
                        print(f"CLEANING VLAN: {host} - {vlanid}")
                        self._addVlan(hostclean, intf, vlanid, intfdict)
        print(f"CLEANING SWITCH: {host}")
        if hostclean:
            self._getAnsibleCleanCommands(host, hostclean)


def getInventory(inventoryFile):
    """Read inventory file"""
    with open(inventoryFile, 'r', encoding='utf-8') as fd:
        out = yaml.safe_load(fd.read())
    return out

def runAnsible(playbookFile, fulldebug=False):
    """Run Ansible Playbook"""
    verbosity = 0
    if fulldebug:
        verbosity = 1000
    ansRunner = ansible_runner.run(private_data_dir='/opt/siterm/config/ansible/sense',
                                   inventory=getInventory('/opt/siterm/config/ansible/sense/inventory/inventory.yaml'),
                                   playbook=playbookFile, verbosity=verbosity)
    return ansRunner

def printports(host, dataIn, _args):
    """Print port data as an example config for rm-configs"""
    out = {host: {'vsw': host, 'allPorts': False, 'allVlans': False, 'ports': {}}}
    for port, portData in dataIn.get('ansible_net_interfaces', {}).items():
        if 'switchport' in portData and portData['switchport'] in ["yes", True, "true"]:
            out[host]['ports'][port] = {}
            if 'bandwidth' in portData and portData['bandwidth']:
                out[host]['ports'][port]['capacity'] = int(portData['bandwidth'])
    print('='*100)
    print('This is only a simple example output of interface names.')
    print('Please remove not needed ports and leave only those to be exposed in the model')
    print('IMPORTANT: This still require additional parameters, like:')
    print('     isAlias - to point to remote endpoint (if lldp is not enaibled)')
    print('     wanlink - True/False which points that port connects to WAN')
    print('     vlan_range - to list vlan range allowed for control - either at switch level, or port level')
    print('     vlan_mtu - predefined what MTU to use on configured new vlan interfaces (at switch level)')
    print('     rst/rsts_enabled - rst - same as switch name; rsts_enabled - ipv4,ipv6 - if Routing service is enabled')
    print('     vrf - vrf name if needed to put vlans under VRF (optional)')
    print('For more details about config parameters, see here: https://sdn-sense.github.io/Configuration.html')
    print('-'*100)
    print(ydump(out))
    print('-'*100)

def cleanswitch(host, dataIn, args):
    """Clean switch data of sense vlans. It will not execute on the device, just print the commands"""
    cls = SwitchCleaner(args)
    cls.clean(host, dataIn)


def run(args):
    """Run the playbook to get facts"""
    playbooks = ['getfacts.yaml']
    for playbook in playbooks:
        print(f"RUNNING PLAYBOOK: {playbook}")
        r = runAnsible(playbook, args.fulldebug)
        for host, _ in r.stats['failures'].items():
            for host_events in r.host_events(host):
                if host_events['event'] != 'runner_on_failed':
                    continue
                pprint.pprint(host_events)
        for host, _ in r.stats['ok'].items():
            print(f"HOSTNAME: {host}")
            print('='*100)
            for host_events in r.host_events(host):
                if host_events['event'] != 'runner_on_ok':
                    continue
                if 'ansible_facts' in host_events['event_data']['res'] and  \
                     'ansible_net_interfaces' in host_events['event_data']['res']['ansible_facts']:
                    if args.dumpconfig:
                        print('-'*100)
                        print(ydump(host_events['event_data']['res']['ansible_facts']))
                        print('-'*100)
                    if args.printports:
                        print('-'*100)
                        printports(host, host_events['event_data']['res']['ansible_facts'], args)
                        print('-'*100)
                    if args.cleanswitch:
                        print('-'*100)
                        cleanswitch(host, host_events['event_data']['res']['ansible_facts'], args)
                        print('-'*100)
            print('='*100)

if __name__ == '__main__':
    parser = getParser("SENSE Ansible test runner")
    arguments = parser.parse_args()
    if arguments.printports or arguments.dumpconfig or arguments.cleanswitch:
        run(arguments)
    else:
        parser.print_help()
        sys.exit(1)
