#!/usr/bin/env python3
"""Helper Script to interact with SiteRM."""
import pprint
import sys

from SiteFE.PolicyService.stateMachine import StateMachine
from SiteRMLibs.GitConfig import getGitConfig
from SiteRMLibs.MainUtilities import (
    getActiveDeltas,
    getDBConn,
    getFileContentAsJson,
    getSiteNameFromConfig,
    getUTCnow,
    getVal,
)


class Helper:
    """Helper class"""

    def __init__(self):
        self.commands = {
            "print-help": {"desc": "Print all available commands", "call": self.printhelp},
            "print-active": {"desc": "Print all active resources in SiteRM.", "call": self.printactive},
            "print-hosts": {"desc": "Print all hosts information in Frontend", "call": self.printhosts},
            "change-delta": {"desc": "Change Delta State", "call": self.changedeltastate},
            "cancel-resource": {"desc": "Cancel resource in SiteRM.", "call": self.cancelresource},
            "cancel-all": {"desc": "Cancel all active resources in SiteRM.", "call": self.cancelall},
            "exit": {"desc": "Exit helper script.", "call": self.exithelper},
        }
        self.config = getGitConfig()
        self.sitename = getSiteNameFromConfig(self.config)
        self.dbI = getVal(getDBConn("List", self), **{"sitename": self.sitename})
        self.statemachine = StateMachine(self.config)

    @staticmethod
    def _getInput(question, validOptions=None):
        """Wrapper for correct input to question"""
        validOptions = validOptions if validOptions else []
        while True:
            inpVal = input(question)
            if validOptions and inpVal not in validOptions:
                print(f"Input {inpVal} not in allowed list: {validOptions}")
            else:
                return inpVal

    # pylint: disable=dangerous-default-value
    def _getActionOption(self, options=["vsw", "rst"]):
        """Get action option from user"""
        print("Which resource we want to deactivate?")
        print("Available options:")
        if "vsw" in options:
            print("   vsw: Virtual Switching (VLAN)")
        if "rst" in options:
            print("   rst: Routing Service (BGP)")
        if "all" in options:
            print("   all: Cancel all active resources")
        return self._getInput("Enter action: ", options)

    def changedeltastate(self):
        """Change delta state to committed and readd to model"""
        print("Which delta state you want to change")
        deltaid = self._getInput("Enter id: ")
        print(f"You entered: {deltaid}")
        for delta in self.dbI.get("deltas", search=[["uid", deltaid]]):
            print(delta)
            self.statemachine.stateChangerDelta(self.dbI, "committed", **delta)
            self.statemachine.modelstatechanger(self.dbI, "add", **delta)

    def printactive(self):
        """List Active"""
        activeDeltas = getActiveDeltas(self)
        print("=" * 50)
        pprint.pprint(activeDeltas)

    def _cancelConfirmed(self, instanceid):
        """Cancel was confirmed and will modify exitsDuring time for delta"""
        print(f"Canceling resource {instanceid}")
        out = {
            "instanceid": instanceid,
            "insertdate": getUTCnow(),
            "endtimestamp": int(getUTCnow()) - 86400,
            "starttimestamp": int(getUTCnow()) - 87400,
        }
        insOut = self.dbI.insert("instancestartend", [out])
        print(f"Inserted instance start-end: {insOut}")
        print(f"DBOutput: {insOut}")
        print(f"SiteRM will cancel resource {instanceid} in next run.")

    def printhosts(self):
        """Print all hosts"""
        hosts = self.dbI.get("hosts", orderby=["updatedate", "DESC"], limit=1000)
        for host in hosts:
            tmpH = getFileContentAsJson(host.get("hostinfo", ""))
            pprint.pprint(tmpH)

    def cancelresource(self):
        """Cancel specific resource"""
        print("=" * 50)
        print("1. Use this command carefully as it will delete resources!")
        print("=" * 50)
        activeDeltas = getActiveDeltas(self)
        if not activeDeltas.get("output", {}):
            print("There are no active Deltas provisioned. Exiting")
            return
        print("-" * 50)
        action = self._getActionOption(["vsw", "rst"])
        print("-" * 50)
        if not activeDeltas["output"].get(action, {}):
            print(f"There are no active {action} resources provisioned. Exiting")
            return
        print("List of all available {action} items:")
        availcmds = {}
        nid = -1
        for key in activeDeltas["output"][action].keys():
            nid += 1
            print(f"{nid}: {key}")
            availcmds[str(nid)] = key
        print("Which resource you want to cancel? Enter ID:")
        deltaid = self._getInput("Enter id: ", availcmds.keys())
        print(f"You entered: {deltaid}")
        print("This resource will be cancelled:")
        pprint.pprint(activeDeltas["output"][action][availcmds[deltaid]])
        print("See full delta above. If you want to proceed to cancel it")
        print("enter yes - to proceed cancel of resource;")
        print("enter no - to exit without changes")
        confirm = self._getInput("Proceed with cancel: ", ["yes", "no"])
        if confirm == "yes":
            self._cancelConfirmed(availcmds[deltaid])

    def cancelall(self):
        """Cancel all active resources"""
        print("=" * 50)
        print("1. Use this command carefully as it will delete resources!")
        activeDeltas = getActiveDeltas(self)
        if not activeDeltas.get("output", {}):
            print("There are no active Deltas provisioned. Exiting")
            return
        print("-" * 50)
        action = self._getActionOption(["vsw", "rst", "all"])
        if action == "all":
            action = ["vsw", "rst"]
        else:
            action = [action]
        print("-" * 50)
        print("The following resources will be cancelled.")
        for act in action:
            if not activeDeltas["output"].get(act, {}):
                continue
            print(f"Active resources for {act}:")
            nid = -1
            for key in activeDeltas["output"][act].keys():
                nid += 1
                print(f"{nid}: {key}")
        print("-" * 50)
        print("enter yes - to proceed cancel of resource;")
        print("enter no - to exit without changes")
        confirm = self._getInput("Proceed with cancel: ", ["yes", "no"])
        if confirm == "yes":
            for act in action:
                if not activeDeltas["output"].get(act, {}):
                    continue
                for key in activeDeltas["output"][act].keys():
                    print(f"Canceling resource {key}")
                    self._cancelConfirmed(key)

    def printhelp(self):
        """Print Help and all available commands, descriptions"""
        print("-" * 50)
        print("Available commands:")
        print("-" * 50)
        for cmd, cmddict in self.commands.items():
            print(f"{cmd} : {cmddict['desc']}")
        print("-" * 50)
        print("Which command you want to execute? ")

    @staticmethod
    def exithelper():
        """Exit Helper Script"""
        print("Finished.")
        sys.exit(0)

    def startup(self):
        """Startup"""
        self.printhelp()
        while True:
            cmd = self._getInput("Enter command: ", self.commands.keys())
            self.commands[cmd]["call"]()
            print("To see available commands, use print-help command.")


if __name__ == "__main__":
    helper = Helper()
    helper.startup()
